#!/usr/bin/env python

# Copyright (c) 2024, NVIDIA CORPORATION.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""A license header check
The tool checks if all files in the repo contain the license header.
NOTE: this script is for github actions only, you should not use it anywhere else.
"""
import os
import subprocess
import sys
import fnmatch
from argparse import ArgumentParser

from github import Github

# Default configs
EXCLUDES = ['NOTICE', '*.md']
LICENSE_PATTERN = ["NVIDIA CORPORATION", "Licensed under the Apache License"]

def getDiffFiles(owner, repo_name, pull_number, token):
    gh = Github(token)
    repo = gh.get_repo(f'{owner}/{repo_name}')
    pr = repo.get_pull(pull_number)
    changed_files = pr.get_files()
    files = [file.filename for file in changed_files]
    # checkout source code
    head_ref = pr.head.ref
    subprocess.run(f"git clone {repo.clone_url} /code && git checkout {head_ref}", shell=True, check=True)

    return files

def filterFiles(files, excludes):
    excluded_files = []
    for file in files:
        print("Filtering file: {}".format(file))
        for pattern in excludes:
            if fnmatch.fnmatch(file, pattern):
                excluded_files.append(file)
                break
    return list(set(files) - set(excluded_files)), list(set(excluded_files))

def checkLicenseHeader(files, license_pattern):
    no_license_files = []
    for file in files:
        with open('/code/' + file, 'r') as f:
            print("Checking file: {}".format(file))
            content = '\n'.join(f.readlines()[:50])
            for pattern in license_pattern:
                if pattern not in content:
                    no_license_files.append(file)
    return no_license_files

def main(owner, repo_name, pull_number, token, excludes, license_pattern):
    try:
        files = getDiffFiles(owner, repo_name, pull_number, token)
        files, excluded_files = filterFiles(files, excludes)

        files_and_directories = os.listdir('/code')
        for item in files_and_directories:
            print(item)


        no_license_files = checkLicenseHeader(files, license_pattern)
        warning_message = ""
        for file in excluded_files:
            warning_message += "WARNING: {} is excluded from this check.\n".format(file)
        print(warning_message)
        if no_license_files:
            error_message = ""
            for file in no_license_files:
                error_message += "ERROR: {} does not contain license header.\n".format(file)
            raise Exception(error_message)
    except Exception as e:
        print(e)
        sys.exit(1)

if __name__ == '__main__':
    parser = ArgumentParser(description="license header check")
    parser.add_argument("--owner", help="repo owner", default='')
    parser.add_argument("--repo_name", help="repo name", default='')
    parser.add_argument("--pull_number", help="pull request number", type=int)
    parser.add_argument("--token", help="github token, will use GITHUB_TOKEN if empty", default='')
    parser.add_argument("--excludes", help="excluded files", default=EXCLUDES)
    parser.add_argument("--license_pattern", help="license/copyright pattern", default=LICENSE_PATTERN)
    args = parser.parse_args()

    OWNER = args.owner if args.owner else os.environ.get('OWNER')
    assert OWNER, 'env OWNER should not be empty'
    REPO_NAME = args.repo_name if args.repo_name else os.environ.get('REPO_NAME')
    assert REPO_NAME, 'REPO_NAME should not be empty'
    PULL_NUMBER = args.pull_number if args.pull_number else int(os.environ.get('PULL_NUMBER'))
    assert PULL_NUMBER, 'env PULL_NUMBER should not be empty'
    GITHUB_TOKEN = args.token if args.token else os.environ.get('GITHUB_TOKEN')
    assert GITHUB_TOKEN, 'env GITHUB_TOKEN should not be empty'
    EXCLUDES = args.excludes if args.excludes else EXCLUDES
    assert EXCLUDES, 'EXCLUDES should not be empty'
    LICENSE_PATTERN = args.license_pattern if args.license_pattern else LICENSE_PATTERN
    assert LICENSE_PATTERN, 'LICENSE_PATTERN should not be empty'

    main(owner=OWNER, repo_name=REPO_NAME, pull_number=PULL_NUMBER, token=GITHUB_TOKEN, excludes=EXCLUDES, license_pattern=LICENSE_PATTERN)