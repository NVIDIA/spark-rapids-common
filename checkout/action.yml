# Copyright (c) 2025, NVIDIA CORPORATION.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: 'Checkout'
description: 'Checkout code'

inputs:
  repository:
    description: |
      Repository name with owner. For example, actions/checkout
      Default: The current repository (from the workflow run context).
    required: false
    default: ''

  ref:
    description: |
      The branch, tag or SHA to checkout. When checking out the repository that
      triggered a workflow, this defaults to the reference or SHA for that event.
      Otherwise, uses the default branch.
    required: false
    default: ''

  token:
    description: |
      Personal access token (PAT) used to fetch the repository. The PAT is configured
      with the local git config, which enables your scripts to run authenticated git
      commands. The post-job step removes the PAT.
      
      We recommend using a service account with the least permissions necessary. Also
      when generating a new PAT, select the least scopes necessary.
      
      [Learn more about creating and using encrypted secrets](https://help.github.com/en/actions/automating-your-workflow-with-github-actions/creating-and-using-encrypted-secrets)
      
      Default: The automatically generated GITHUB_TOKEN for the current run.
    required: false
    default: ''

  ssh-key:
    description: |
      SSH key used to fetch the repository. The SSH key is configured with the local
      git config, which enables your scripts to run authenticated git commands. The
      post-job step removes the SSH key.
      
      We recommend using a service account with the least permissions necessary.
      
      [Learn more about creating and using encrypted secrets](https://help.github.com/en/actions/automating-your-workflow-with-github-actions/creating-and-using-encrypted-secrets)
    required: false
    default: ''

  ssh-known-hosts:
    description: |
      Known hosts in addition to the user and global host key database. The public SSH
      keys for a host may be obtained using the utility `ssh-keyscan`. For example,
      `ssh-keyscan github.com`. The public key for github.com is always implicitly
      added.
    required: false
    default: ''

  ssh-strict:
    description: |
      Whether to perform strict host key checking. When true, adds the options
      `StrictHostKeyChecking=yes` and `CheckHostIP=no` to the SSH command line. Use
      the input `ssh-known-hosts` to configure additional hosts.
      Default: true
    required: false
    default: ''

  ssh-user:
    description: |
      The user to use when connecting to the remote SSH host. By default 'git' is
      used.
      Default: git
    required: false
    default: ''

  persist-credentials:
    description: |
      Whether to configure the token or SSH key with the local git config
      Default: true
    required: false
    default: ''

  path:
    description: |
      Relative path under $GITHUB_WORKSPACE to place the repository
    required: false
    default: ''

  clean:
    description: |
      Whether to execute `git clean -ffdx && git reset --hard HEAD` before fetching
      Default: true
    required: false
    default: ''

  filter:
    description: |
      Partially clone against a given filter. Overrides sparse-checkout if set.
      Default: null
    required: false
    default: ''

  sparse-checkout:
    description: |
      Do a sparse checkout on given patterns. Each pattern should be separated with
      new lines.
      Default: null
    required: false
    default: ''

  sparse-checkout-cone-mode:
    description: |
      Specifies whether to use cone-mode when doing a sparse checkout.
      Default: true
    required: false
    default: ''

  fetch-depth:
    description: |
      Number of commits to fetch. 0 indicates all history for all branches and tags.
      Default: 1
    required: false
    default: ''

  fetch-tags:
    description: |
      Whether to fetch tags, even if fetch-depth > 0.
      Default: false
    required: false
    default: ''

  show-progress:
    description: |
      Whether to show progress status output when fetching.
      Default: true
    required: false
    default: ''

  lfs:
    description: |
      Whether to download Git-LFS files
      Default: false
    required: false
    default: ''

  submodules:
    description: |
      Whether to checkout submodules: `true` to checkout submodules or `recursive` to
      recursively checkout submodules.
      
      When the `ssh-key` input is not provided, SSH URLs beginning with
      `git@github.com:` are converted to HTTPS.
      
      Default: false
    required: false
    default: ''

  set-safe-directory:
    description: |
      Add repository path as safe.directory for Git global config by running `git
      config --global --add safe.directory <path>`
      Default: true
    required: false
    default: ''

  github-server-url:
    description: |
      The base URL for the GitHub instance that you are trying to clone from, will use
      environment defaults to fetch from the same instance that the workflow is
      running from unless specified. Example URLs are https://github.com or
      https://my-ghes-server.example.com
    required: false
    default: ''

runs:
  using: "composite"
  steps:
    - name: Prepare non-empty inputs
      id: prepare
      shell: bash
      run: |
        params=""
        
        keys=$(echo "$INPUT_NAMES" | tr ' ' '\n')
        
        while IFS= read -r key; do
          value="${inputs[$key]}"
          
          if [ -n "$value" ]; then
            params+="\"$key\":\"$value\","
          fi
        done <<< "$keys"
        
        if [ -n "$params" ]; then
          params="${params%,}}"
        else
          params="{}"
        fi
        
        echo "params=$params" >> $GITHUB_OUTPUT
      env:
        INPUT_NAMES: ${{ join(keys(inputs), ' ') }}
        GITHUB_OUTPUT: ${{ github.output_path }}

    - name: Checkout code
      uses: actions/checkout@v4
      with: ${{ fromJSON(steps.prepare.outputs.params) }}
