# Copyright (c) 2025, NVIDIA CORPORATION.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: 'Markdown Link Check'
description: 'Check markdown links'

runs:
  using: "composite"
  steps:
    - name: Run markdown link check
      id: markdown-link-check
      uses: tcort/github-action-markdown-link-check@v1
      with:
        max-depth: -1
        use-verbose-mode: 'yes'
        base-branch: 'gh-pages'
    
    - name: Summarize results
      shell: bash
      if: always()
      run: |
        # Initialize variables
        has_errors=0
        current_file=""
        file_summaries=()
        in_summary_section=0
        
        # Process output line by line
        while IFS= read -r line; do
            # Detect file header lines
            if [[ "$line" =~ ^FILE:[[:space:]]*(.+) ]]; then
                # Save previous file summary
                if [ -n "$current_file" ] && [ $in_summary_section -eq 1 ]; then
                    file_summaries+=("$current_file")
                    in_summary_section=0
                fi
                
                current_file="${BASH_REMATCH[1]}"
            
            # Detect start of summary section (after "n links checked.")
            elif [[ "$line" =~ ^[[:space:]]*[0-9]+[[:space:]]*links[[:space:]]*checked\. ]]; then
                in_summary_section=1
                # Start new summary for this file
                file_summaries+=("$current_file")
                file_summaries+=("$line")
            
            # Collect summary content
            elif [ $in_summary_section -eq 1 ]; then
                # Add to current summary
                file_summaries+=("$line")
                
                # Check if this line indicates an error
                if [[ "$line" =~ ERROR: ]] || [[ "$line" =~ \[✖\] ]]; then
                    has_errors=1
                fi
            
            # Reset summary section flag when we hit a blank line or new file
            elif [[ -z "$line" ]] || [[ "$line" =~ ^FILE: ]]; then
                in_summary_section=0
            fi
        done <<< "$MLC_OUTPUT"
        
        # Output final conclusion
        if [ $has_errors -eq 0 ]; then
            echo "✅ All links are valid"
            exit 0
        fi
        
        echo "❌ Found broken links"
        echo
        echo "===== DETAILS ====="
        
        # Output error details
        current_filename=""
        for line in "${file_summaries[@]}"; do
            # If line is a filename
            if [[ "$line" =~ ^FILE: ]]; then
                current_filename="${line#FILE: }"
                continue
            fi
            
            # Only show summaries that contain errors
            if [[ "$line" =~ ERROR: ]] || [[ "$line" =~ \[✖\] ]]; then
                # Print filename if it's the start of a summary block
                if [ -n "$current_filename" ]; then
                    echo "File: $current_filename"
                    current_filename=""
                fi
                
                # Print the line with proper indentation
                echo "  $line"
            fi
        done