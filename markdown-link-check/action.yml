# Copyright (c) 2025, NVIDIA CORPORATION.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: 'Markdown Link Check'
description: 'Check markdown links'

runs:
  using: "composite"
  steps:
    - name: Run markdown link check
      id: markdown-link-check
      uses: tcort/github-action-markdown-link-check@v1
      with:
        max-depth: -1
        use-verbose-mode: 'yes'
        base-branch: 'gh-pages'
    
    - name: Summarize results
      shell: bash
      if: always()
      run: |
        {
          has_error=0
          current_file=""
          broken_links=()
          
          function output_broken_links() {
              if [ ${#broken_links[@]} -gt 0 ]; then
                  has_error=1
                  echo "File: $current_file"
                  for link_info in "${broken_links[@]}"; do
                      echo "  Broken link: $link_info"
                  done
                  echo ""
              fi
          }
          
          while IFS= read -r line; do
              if [[ $line =~ ^[[:space:]]*FILE:[[:space:]]*(.+) ]]; then
                  filename="${BASH_REMATCH[1]}"
                  if [ -n "$current_file" ]; then
                      output_broken_links
                  fi
                  current_file="$filename"
                  broken_links=()
              elif [[ $line =~ ^[[:space:]]*\[âœ–\]\ ([^[:space:]]+).*Status:\ ([0-9]+) ]]; then
                  url="${BASH_REMATCH[1]}"
                  status="${BASH_REMATCH[2]}"
                  broken_links+=("$url (Status: $status)")
              fi
          done <<< "$MLC_OUTPUT"
          
          if [ -n "$current_file" ]; then
              output_broken_links
          fi
          
          if [ $has_error -eq 0 ]; then
              echo "All links are good!"
          else
              echo "Found broken links in the above files"
          fi
        } || true
