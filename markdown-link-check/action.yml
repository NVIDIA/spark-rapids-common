# Copyright (c) 2025, NVIDIA CORPORATION.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: 'Markdown Link Check'
description: 'Check markdown links'

runs:
  using: "composite"
  steps:
    - name: Run markdown link check
      id: markdown-link-check
      uses: tcort/github-action-markdown-link-check@v1
      with:
        max-depth: -1
        use-verbose-mode: 'yes'
        base-branch: 'gh-pages'
    
    - name: Summarize results
      shell: bash
      if: always()
      run: |
        # Initialize variables
        has_errors=0
        current_file=""
        files=()
        all_links=()
        
        # Process output line by line
        while IFS= read -r line; do
            # Detect file header lines
            if [[ "$line" =~ ^FILE:[[:space:]]*(.+) ]]; then
                current_file="${BASH_REMATCH[1]}"
                files+=("$current_file")
            
            # Detect broken link lines - extract URL, status code, and error message
            elif [[ "$line" =~ ^[[:space:]]*\[✖\]\ ([^[:space:]]+).*Status:\ ([0-9]+)(.*)$ ]]; then
                url="${BASH_REMATCH[1]}"
                status="${BASH_REMATCH[2]}"
                error_msg="${BASH_REMATCH[3]}"
                
                # Clean up error message (trim leading/trailing whitespace)
                error_msg=$(echo "$error_msg" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')
                
                # Add to links array (format: file|url|status|error)
                if [ -n "$current_file" ]; then
                    all_links+=("${current_file}|${url}|${status}|${error_msg}")
                    has_errors=1
                fi
            fi
        done <<< "$MLC_OUTPUT"
        
        # Output final conclusion
        if [ $has_errors -eq 0 ]; then
            echo "✅ All links are valid"
            exit 0
        fi
        
        echo "❌ Found broken links"
        echo
        echo "===== DETAILS ====="
        
        # Remove duplicate files
        unique_files=($(printf "%s\n" "${files[@]}" | sort -u))
        
        # Remove duplicate links
        unique_links=($(printf "%s\n" "${all_links[@]}" | sort -u))
        
        # Output error details
        for file in "${unique_files[@]}"; do
            file_links=()
            for link in "${unique_links[@]}"; do
                if [[ "$link" == "${file}|"* ]]; then
                    # Extract link info (remove filename prefix)
                    link_only="${link#*|}"
                    file_links+=("$link_only")
                fi
            done
            
            # Output if file has broken links
            if [ ${#file_links[@]} -gt 0 ]; then
                echo "File: $file"
                
                # Output each broken link with details
                for link_info in "${file_links[@]}"; do
                    # Split link info into components
                    IFS='|' read -r url status error_msg <<< "$link_info"
                    
                    # Format output with error message if present
                    if [ -n "$error_msg" ]; then
                        echo "  $url (Status: $status): $error_msg"
                    else
                        echo "  $url (Status: $status)"
                    fi
                done
                
                # Add link count
                echo "  → Found ${#file_links[@]} broken link(s)"
                echo
            fi
        done