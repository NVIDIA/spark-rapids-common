# Copyright (c) 2024-2025, NVIDIA CORPORATION.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# A reusable workflow to automerge commits from Current to Next Release if exists

name: auto-merge

on:
  workflow_call:
    inputs:
      owner:
        required: true
        type: string
      repo:
        required: true
        type: string
      branch: # github.event.pull_request.base.ref
        required: true
        type: string
      file_use_base:
        description: 'file/path that require to use content of BASE'
        default: ''
        required: false
        type: string
    secrets:
      token:
        required: true


jobs:
  auto-merge:
    runs-on: ubuntu-latest

    steps:
      - name: set HEAD ENV
        run: |
          echo "HEAD=${{ inputs.branch }}" >> $GITHUB_ENV
          echo "DELETE_HEAD=False" >> $GITHUB_ENV

      - name: Generate target branch
        run: |
          # https://github.com/NVIDIA/spark-rapids-common/issues/34
          if [[ "${{ inputs.branch }}" == release/* ]]; then
            echo "BASE=main" >> $GITHUB_ENV
          else # maintain compatibility support for branch-*
            current_branch="${{ inputs.branch }}"
            version=${current_branch#branch-}

            IFS='.' read -r -a parts <<< "$version"
            year=${parts[0]}
            month=${parts[1]}
            month=$((10#$month + 2))
            if [ $month -gt 12 ]; then
              month=$((month - 12))
              year=$((year + 1))
            fi

            next_release=$(printf "%02d.%02d" $year $month)
            echo "Next release is $next_release"
            echo "BASE=branch-$next_release" >> $GITHUB_ENV
          fi

      - name: Check for existing v*.0 tag
        run: |
          branch="${{ inputs.branch }}"
          if [[ "$branch" == release/* ]]; then
            version="${branch#release/}"
          elif [[ "$branch" == branch-* ]]; then
            version="${branch#branch-}"
          else
            echo "Unsupported branch ${{ inputs.branch }}..."
            exit 1
          fi
          tag_name="v${version}.0"
          echo "Checking for tag $tag_name..."

          CODE=$(curl -s -o /dev/null -w "%{http_code}" -H "Authorization: token ${{ secrets.token }}" \
            https://api.github.com/repos/${{ inputs.owner }}/${{ inputs.repo }}/git/ref/tags/${tag_name})
          if [ "$CODE" -eq 200 ]; then
            echo "Tag $tag_name exists. Skipping merge..."
            echo "continue_merge=false" >> $GITHUB_ENV
          else
            echo "Proceeding with merge..."
            echo "continue_merge=true" >> $GITHUB_ENV
          fi

      - name: Check if target branch exists
        if: env.continue_merge == 'true'
        run: |
          CODE=$(curl -s -o /dev/null -w "%{http_code}" -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/${{ inputs.owner }}/${{ inputs.repo }}/branches/${{ env.BASE }})
          echo "Response code: $CODE..."

          if [ $CODE -eq 200 ]; then
            echo "continue_merge=true" >> $GITHUB_ENV
          else
            echo "continue_merge=false" >> $GITHUB_ENV
            echo "Failed to find $BASE. Skip auto-merge..."
          fi

      - name: prepare code base if $FILE_USE_BASE has content
        uses: actions/checkout@v4
        if: ${{ inputs.file_use_base != '' && env.continue_merge == 'true' }}
        with:
          ref: ${{ env.HEAD }} # force to fetch from the latest upstream instead of PR ref
          token: ${{ secrets.token }}

      - name: push intermediate branch for auto-merge
        if: ${{ inputs.file_use_base != '' && env.continue_merge == 'true' }}
        run: |
          git config user.name "spark-rapids automation"
          git config user.email "70000568+nvauto@users.noreply.github.com"

          git fetch origin "${HEAD}" "${BASE}"
          git checkout -b ${INTERMEDIATE_HEAD} origin/${HEAD}

          # Sync the $BASE branch with the commits from the $HEAD branch,
          # excluding the paths defined as $FILE_USE_BASE.
          git checkout origin/${BASE} -- ${FILE_USE_BASE}

          # If any $FILE_USE_BASE is updated in the HEAD branch,
          # always change it to the corresponding one from the BASE branch.
          [ ! -z "$(git status --porcelain=v1 --untracked=no)" ] && \
            git commit -s -am "Auto-merge use ${BASE} versions"
          git push origin ${INTERMEDIATE_HEAD} -f

          # overwrite HEAD env
          echo "HEAD=$INTERMEDIATE_HEAD" >> $GITHUB_ENV
          echo "DELETE_HEAD=True" >> $GITHUB_ENV
        env:
          INTERMEDIATE_HEAD: bot-auto-merge-${{ env.HEAD }}
          FILE_USE_BASE: ${{ inputs.file_use_base }}

      - name: auto-merge job
        if: env.continue_merge == 'true'
        uses: NVIDIA/spark-rapids-common/action-helper@main
        with:
          operator: auto-merge
        env:
          OWNER: ${{ inputs.owner }}
          REPO: ${{ inputs.repo }}
          HEAD: ${{ env.HEAD }}
          BASE: ${{ env.BASE }}
          TOKEN: ${{ secrets.token }}
          DELETE_HEAD: ${{ env.DELETE_HEAD }}
